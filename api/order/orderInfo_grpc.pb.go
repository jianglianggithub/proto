// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: orderInfo.proto

package order

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderInfo_Create_FullMethodName = "/order.OrderInfo/Create"
)

// OrderInfoClient is the client API for OrderInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderInfoClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
}

type orderInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderInfoClient(cc grpc.ClientConnInterface) OrderInfoClient {
	return &orderInfoClient{cc}
}

func (c *orderInfoClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, OrderInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderInfoServer is the server API for OrderInfo service.
// All implementations must embed UnimplementedOrderInfoServer
// for forward compatibility.
type OrderInfoServer interface {
	Create(context.Context, *CreateReq) (*CreateRes, error)
	mustEmbedUnimplementedOrderInfoServer()
}

// UnimplementedOrderInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderInfoServer struct{}

func (UnimplementedOrderInfoServer) Create(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderInfoServer) mustEmbedUnimplementedOrderInfoServer() {}
func (UnimplementedOrderInfoServer) testEmbeddedByValue()                   {}

// UnsafeOrderInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderInfoServer will
// result in compilation errors.
type UnsafeOrderInfoServer interface {
	mustEmbedUnimplementedOrderInfoServer()
}

func RegisterOrderInfoServer(s grpc.ServiceRegistrar, srv OrderInfoServer) {
	// If the following call pancis, it indicates UnimplementedOrderInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderInfo_ServiceDesc, srv)
}

func _OrderInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderInfoServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderInfo_ServiceDesc is the grpc.ServiceDesc for OrderInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderInfo",
	HandlerType: (*OrderInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderInfo_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orderInfo.proto",
}
